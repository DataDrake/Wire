require 'singleton'
require 'sinatra/base'

$config = {}

class Wire

	class Closet
		include Wire::App
		include Wire::Resource
 
		def initialize
			@sinatra = Sinatra.new
		end

		def build( &block )
			puts "Starting Up Wire..."
			puts "Starting Apps..."
			Docile.dsl_eval( self , &block )
		end

		def info
			puts "Wire Instance Info\n\nApps:"
			$config.each do |uri , config|
				app_info( uri , config )
			end
		end

		def run
			puts @sinatra.routes
			@sinatra.run!
		end
	end

	module App
		attr_reader :baseURI

		def app( baseURI , &block)
			$config[baseURI] = {:resources => {}}
			@currentURI = baseURI
			puts "Starting App at: #{baseURI}"
			puts "Setting up resources..."
			Docile.dsl_eval( self, &block )
		end

		def type( type )
			$config[currentURI][:type] = type
		end

		def app_info( uri , config )
			puts "\t#{config[:type]} App URI: #{uri}"

			puts "\n\tResources:"
			config[:resources].each do |uri, config|
				resource_info( uri , config )

			end

			puts "\n"
		end
	end

	module Resource

		attr_reader :uri

		def resource( uri , &block )
			$config[@currentURI][:resources][uri] = {:actions => {}}
			puts "Starting Resource At: #{uri}"
			puts "Creating actions..."
			Docile.dsl_eval( self , &block )
		end

		def action( name )
			puts "Enabling Action: #{name}"
			@actions << name

			case name
				when 'create'
					
				#	Web.instance.sinatra.put(@uri) do
				#		$resources[request.path].create( request , response , params)
				#	end
				when 'read'
                                #        Web.instance.sinatra.get(@uri) do 
                                #                $resources[request.path].readAll( params )
                                #        end
				#	Web.instance.sinatra.get(@uri + "/:id") do
				#		$resources[request.path].read( request, response, params )
				#	end
				when 'update'
				#	@update.each do |uri, proc|
				#		Web.instance.sinatra.post(@uri + uri) do 
                                #                       $resources[request.path].instance_eval( &proc )
                                #                end
                                #        end
				when 'delete'
				#	@delete.each do |uri, proc|
				#		Web.instance.sinatra.delete(@uri + uri) do 
                                #                        $resources[request.path].instance_eval( &proc )
                                #
			        #	        end
                                #	end
			end
		end

		def resource_info( uri , config )
			puts "\t\tResource URI: #{uri}"
			puts "\t\tActions Allowed:"
			config[:actions].each do |a,v|
				puts "\t\t\t#{a}"
			end
			puts "\n"
		end
	end
end
